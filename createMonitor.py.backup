from datadog import initialize, api
from argparse import ArgumentParser
import sys
import json
import time
from os import environ
"""
from datadog_api_client.v1 import ApiClient, Configuration
from datadog_api_client.v1.api.monitors_api import MonitorsApi
from datadog_api_client.v1.model.monitor import Monitor
from datadog_api_client.v1.model.monitor_type import MonitorType
"""

# set debug and active flags
debug = True
active = True

# Read in API keys from a file
# The file format should be like this:
# apiKey:123456789
# appKey:123456789
def getAPIkeys(file):
	apiKey = None
	appKey = None
	with open(file) as apis:
		for line in apis:
			line.rstrip()	
			tag = line.split(':')
			if (tag[0] == "apiKey"):
				apiKey = tag[1]
				if (debug):
					print("apiKey = " + apiKey, end="")
			elif (tag[0] == "appKey"):
				appKey = tag[1]
				if (debug):
					print("appKey = " + appKey, end="")
	return(apiKey, appKey)

# Main routine of the program
def main(apifile):
	# Initialize Datadog API
	(apiKey, appKey) = getAPIkeys(apifile)
	options = {
		'api_key':apiKey.rstrip(),
		'app_key':appKey.rstrip()
	}
	initialize(**options)

	if active:
		# Create a new monitor
		monitor_options = {
			"notify_no_data": True,
			"no_data_timeframe": 20
		}
		tags = ["owner:et", "type:log"]
		api.Monitor.create(
			type="log alert",
			query='logs("service:foo AND type:error").index("main").rollup("count").by("source").last("5m") > 2',
			name="Example log monitor",
			message="some message Notify: @hipchat-channel",
			priority=3,
			tags=tags,
			options=monitor_options
		)
"""
		body = Monitor(
			name="Example-Create_a_monitor_returns_OK_response",
			type=MonitorType("log alert"),
			query='logs("service:foo AND type:error").index("main").rollup("count").by("source").last("5m") > 2',
			message="some message Notify: @hipchat-channel",
			tags=["test:examplecreateamonitorreturnsokresponse", "env:ci"],
			priority=3,
			restricted_roles=[ROLE_DATA_ID],
		)
		configuration = Configuration()
		with ApiClient(configuration) as api_client:
			api_instance = MonitorsApi(api_client)
			response = api_instance.create_monitor(body=body)
			print(response)
"""

# Only executed as a standalone program, not from an import from another program
if __name__ == "__main__":
	parser = ArgumentParser(description='Create a monitor using the Datadog API.')
	helpText = "Enter a file to read in the API and APP keys each one on a separate line with this format:\n"
	helpText += "apiKey:123   appKey:123\n"
	parser.add_argument('-i', help=helpText, required=True)
	args = parser.parse_args()
	apifile = args.i if args.i else 'apikeys'
	main(apifile)
